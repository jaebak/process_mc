// Ref: https://root.cern.ch/doc/v610/TMVAClassification_8C.html
#include <iostream>
#include <vector>
#include <string>

#include "TROOT.h"
#include "TSystem.h"
#include "TH1D.h"
#include "TChain.h"
#include "TTreeReader.h"
#include "TCanvas.h"
#include "TLorentzVector.h"
#include "TString.h"
#include "TCut.h"

#include "TMVA/Factory.h"
#include "TMVA/DataLoader.h"
#include "TMVA/Tools.h"
#include "TMVA/TMVAGui.h"

// TODO: Add option 

using std::cout;
using std::endl;
using std::string;
using std::vector;


// Class: ReadMLP
// Automatically generated by MethodBase::MakeClass
//

/* configuration options =====================================================

#GEN -*-*-*-*-*-*-*-*-*-*-*- general info -*-*-*-*-*-*-*-*-*-*-*-

Method         : MLP::MLP
TMVA Release   : 4.2.1         [262657]
ROOT Release   : 6.18/00       [397824]
Creator        : jbkim
Date           : Sat Oct  8 15:33:05 2022
Host           : Linux slepton.physics.ucsb.edu 3.10.0-957.27.2.el7.x86_64 #1 SMP Tue Jul 30 08:44:23 CDT 2019 x86_64 x86_64 x86_64 GNU/Linux
Dir            : /data1/jbkim/delphes_madgraph/process_mc
Training events: 20000
Analysis type  : [Classification]


#OPT -*-*-*-*-*-*-*-*-*-*-*-*- options -*-*-*-*-*-*-*-*-*-*-*-*-

# Set by User:
NCycles: "600" [Number of training cycles]
HiddenLayers: "N+5" [Specification of hidden layer architecture]
NeuronType: "tanh" [Neuron activation function type]
V: "False" [Verbose output (short form of "VerbosityLevel" below - overrides the latter one)]
VarTransform: "N" [List of variable transformations performed before training, e.g., "D_Background,P_Signal,G,N_AllClasses" for: "Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)"]
H: "True" [Print method-specific help message]
TestRate: "5" [Test for overtraining performed at each #th epochs]
UseRegulator: "False" [Use regulator to avoid over-training]
# Default:
RandomSeed: "1" [Random seed for initial synapse weights (0 means unique seed for each run; default value '1')]
EstimatorType: "CE" [MSE (Mean Square Estimator) for Gaussian Likelihood or CE(Cross-Entropy) for Bernoulli Likelihood]
NeuronInputType: "sum" [Neuron input function type]
VerbosityLevel: "Default" [Verbosity level]
CreateMVAPdfs: "False" [Create PDFs for classifier outputs (signal and background)]
IgnoreNegWeightsInTraining: "False" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]
TrainingMethod: "BP" [Train with Back-Propagation (BP), BFGS Algorithm (BFGS), or Genetic Algorithm (GA - slower and worse)]
LearningRate: "2.000000e-02" [ANN learning rate parameter]
DecayRate: "1.000000e-02" [Decay rate for learning parameter]
EpochMonitoring: "False" [Provide epoch-wise monitoring plots according to TestRate (caution: causes big ROOT output file!)]
Sampling: "1.000000e+00" [Only 'Sampling' (randomly selected) events are trained each epoch]
SamplingEpoch: "1.000000e+00" [Sampling is used for the first 'SamplingEpoch' epochs, afterwards, all events are taken for training]
SamplingImportance: "1.000000e+00" [ The sampling weights of events in epochs which successful (worse estimator than before) are multiplied with SamplingImportance, else they are divided.]
SamplingTraining: "True" [The training sample is sampled]
SamplingTesting: "False" [The testing sample is sampled]
ResetStep: "50" [How often BFGS should reset history]
Tau: "3.000000e+00" [LineSearch "size step"]
BPMode: "sequential" [Back-propagation learning mode: sequential or batch]
BatchSize: "-1" [Batch size: number of events/batch, only set if in Batch Mode, -1 for BatchSize=number_of_events]
ConvergenceImprove: "1.000000e-30" [Minimum improvement which counts as improvement (<0 means automatic convergence check is turned off)]
ConvergenceTests: "-1" [Number of steps (without improvement) required for convergence (<0 means automatic convergence check is turned off)]
UpdateLimit: "10000" [Maximum times of regulator update]
CalculateErrors: "False" [Calculates inverse Hessian matrix at the end of the training to be able to calculate the uncertainties of an MVA value]
WeightRange: "1.000000e+00" [Take the events for the estimator calculations from small deviations from the desired value to large deviations only over the weight range]
##


#VAR -*-*-*-*-*-*-*-*-*-*-*-* variables *-*-*-*-*-*-*-*-*-*-*-*-

NVar 10
min_dR_gamma_lepton           min_dR_gamma_lepton           min_dR_gamma_lepton           min_dR_gamma_lepton                                             'F'    [0.407389819622,3.44619870186]
llg_cosTheta                  llg_cosTheta                  llg_cosTheta                  llg_cosTheta                                                    'F'    [-0.999929726124,0.999927699566]
llg_costheta                  llg_costheta                  llg_costheta                  llg_costheta                                                    'F'    [-0.991416931152,0.984229743481]
max_dR_gamma_lepton           max_dR_gamma_lepton           max_dR_gamma_lepton           max_dR_gamma_lepton                                             'F'    [0.550109684467,4.98971271515]
gamma_eta                     gamma_eta                     gamma_eta                     gamma_eta                                                       'F'    [-2.49915957451,2.49951863289]
lep_plus_eta                  lep_plus_eta                  lep_plus_eta                  lep_plus_eta                                                    'F'    [-2.49744796753,2.49700021744]
lep_minus_eta                 lep_minus_eta                 lep_minus_eta                 lep_minus_eta                                                   'F'    [-2.49950528145,2.49615073204]
llg_Phi                       llg_Phi                       llg_Phi                       llg_Phi                                                         'F'    [0.000243336049607,6.28295326233]
llg_pt_over_llg_mass          llg_pt_over_llg_mass          llg_pt_over_llg_mass          llg_pt_over_llg_mass                                            'F'    [0.000634083291516,7.44772195816]
gamma_id                      gamma_id                      gamma_id                      gamma_id                                                        'F'    [0,1]
NSpec 1
llg_m                         llg_m                         llg_m                         F                                                               'F'    [100.068763733,179.944274902]


============================================================================ */

#include <array>
#include <vector>
#include <cmath>
#include <string>
#include <iostream>

#ifndef IClassifierReader__def
#define IClassifierReader__def

class IClassifierReader {

 public:

   // constructor
   IClassifierReader() : fStatusIsClean( true ) {}
   virtual ~IClassifierReader() {}

   // return classifier response
   virtual double GetMvaValue( const std::vector<double>& inputValues ) const = 0;

   // returns classifier status
   bool IsStatusClean() const { return fStatusIsClean; }

 protected:

   bool fStatusIsClean;
};

#endif

class ReadMLP : public IClassifierReader {

 public:

   // constructor
   ReadMLP( std::vector<std::string>& theInputVars )
      : IClassifierReader(),
        fClassName( "ReadMLP" ),
        fNvars( 10 )
   {
      // the training input variables
      const char* inputVars[] = { "min_dR_gamma_lepton", "llg_cosTheta", "llg_costheta", "max_dR_gamma_lepton", "gamma_eta", "lep_plus_eta", "lep_minus_eta", "llg_Phi", "llg_pt_over_llg_mass", "gamma_id" };

      // sanity checks
      if (theInputVars.size() <= 0) {
         std::cout << "Problem in class \"" << fClassName << "\": empty input vector" << std::endl;
         fStatusIsClean = false;
      }

      if (theInputVars.size() != fNvars) {
         std::cout << "Problem in class \"" << fClassName << "\": mismatch in number of input values: "
                   << theInputVars.size() << " != " << fNvars << std::endl;
         fStatusIsClean = false;
      }

      // validate input variables
      for (size_t ivar = 0; ivar < theInputVars.size(); ivar++) {
         if (theInputVars[ivar] != inputVars[ivar]) {
            std::cout << "Problem in class \"" << fClassName << "\": mismatch in input variable names" << std::endl
                      << " for variable [" << ivar << "]: " << theInputVars[ivar].c_str() << " != " << inputVars[ivar] << std::endl;
            fStatusIsClean = false;
         }
      }

      // initialize min and max vectors (for normalisation)
      fVmin[0] = -1;
      fVmax[0] = 1;
      fVmin[1] = -1;
      fVmax[1] = 1;
      fVmin[2] = -1;
      fVmax[2] = 1;
      fVmin[3] = -1;
      fVmax[3] = 1;
      fVmin[4] = -1;
      fVmax[4] = 1;
      fVmin[5] = -1;
      fVmax[5] = 0.99999988079071;
      fVmin[6] = -1;
      fVmax[6] = 1;
      fVmin[7] = -1;
      fVmax[7] = 0.99999988079071;
      fVmin[8] = -1;
      fVmax[8] = 1;
      fVmin[9] = -1;
      fVmax[9] = 1;

      // initialize input variable types
      fType[0] = 'F';
      fType[1] = 'F';
      fType[2] = 'F';
      fType[3] = 'F';
      fType[4] = 'F';
      fType[5] = 'F';
      fType[6] = 'F';
      fType[7] = 'F';
      fType[8] = 'F';
      fType[9] = 'F';

      // initialize constants
      Initialize();

      // initialize transformation
      InitTransform();
   }

   // destructor
   virtual ~ReadMLP() {
      Clear(); // method-specific
   }

   // the classifier response
   // "inputValues" is a vector of input values in the same order as the
   // variables given to the constructor
   double GetMvaValue( const std::vector<double>& inputValues ) const override;

 private:

   // method-specific destructor
   void Clear();

   // input variable transformation

   double fOff_1[3][10];
   double fScal_1[3][10];
   void InitTransform_1();
   void Transform_1( std::vector<double> & iv, int sigOrBgd ) const;
   void InitTransform();
   void Transform( std::vector<double> & iv, int sigOrBgd ) const;

   // common member variables
   const char* fClassName;

   const size_t fNvars;
   size_t GetNvar()           const { return fNvars; }
   char   GetType( int ivar ) const { return fType[ivar]; }

   // normalisation of input variables
   double fVmin[10];
   double fVmax[10];
   double NormVariable( double x, double xmin, double xmax ) const {
      // normalise to output range: [-1, 1]
      return 2*(x - xmin)/(xmax - xmin) - 1.0;
   }

   // type of input variable: 'F' or 'I'
   char   fType[10];

   // initialize internal variables
   void Initialize();
   double GetMvaValue__( const std::vector<double>& inputValues ) const;

   // private members (method specific)

   double ActivationFnc(double x) const;
   double OutputActivationFnc(double x) const;

   double fWeightMatrix0to1[16][11];   // weight matrix from layer 0 to 1
   double fWeightMatrix1to2[1][16];   // weight matrix from layer 1 to 2

};

inline void ReadMLP::Initialize()
{
   // build network structure
   // weight matrix from layer 0 to 1
   fWeightMatrix0to1[0][0] = -0.530010727583057;
   fWeightMatrix0to1[1][0] = 2.88524675683068;
   fWeightMatrix0to1[2][0] = 1.75912125297359;
   fWeightMatrix0to1[3][0] = 4.36226870722962;
   fWeightMatrix0to1[4][0] = -0.108400731799026;
   fWeightMatrix0to1[5][0] = 0.0339662279206307;
   fWeightMatrix0to1[6][0] = 4.91232965653397;
   fWeightMatrix0to1[7][0] = 5.13120912867424;
   fWeightMatrix0to1[8][0] = 0.241863032783821;
   fWeightMatrix0to1[9][0] = 1.49521572897232;
   fWeightMatrix0to1[10][0] = -1.15123132971184;
   fWeightMatrix0to1[11][0] = -0.670546918384209;
   fWeightMatrix0to1[12][0] = -1.35457670173963;
   fWeightMatrix0to1[13][0] = -1.5777541245995;
   fWeightMatrix0to1[14][0] = 1.12406293253072;
   fWeightMatrix0to1[0][1] = -0.117774653330456;
   fWeightMatrix0to1[1][1] = -0.591985494099676;
   fWeightMatrix0to1[2][1] = 1.23498091800872;
   fWeightMatrix0to1[3][1] = 0.985728555871381;
   fWeightMatrix0to1[4][1] = 1.19360185673645;
   fWeightMatrix0to1[5][1] = 1.30487326895043;
   fWeightMatrix0to1[6][1] = -0.0403105946512655;
   fWeightMatrix0to1[7][1] = 0.347543869553934;
   fWeightMatrix0to1[8][1] = -3.8672236092938;
   fWeightMatrix0to1[9][1] = -0.265561650970605;
   fWeightMatrix0to1[10][1] = 0.0398836026898512;
   fWeightMatrix0to1[11][1] = 5.7358681905847;
   fWeightMatrix0to1[12][1] = 0.679206439071274;
   fWeightMatrix0to1[13][1] = -2.09847029993375;
   fWeightMatrix0to1[14][1] = -0.126214111316725;
   fWeightMatrix0to1[0][2] = 0.298578295781591;
   fWeightMatrix0to1[1][2] = 0.830795008868343;
   fWeightMatrix0to1[2][2] = 0.665960775114811;
   fWeightMatrix0to1[3][2] = -1.44717005498761;
   fWeightMatrix0to1[4][2] = -0.538944104696651;
   fWeightMatrix0to1[5][2] = 0.488241826014744;
   fWeightMatrix0to1[6][2] = -4.37034833718308;
   fWeightMatrix0to1[7][2] = 3.59931965562091;
   fWeightMatrix0to1[8][2] = 0.0833967498133067;
   fWeightMatrix0to1[9][2] = 2.9984953752024;
   fWeightMatrix0to1[10][2] = -0.207423707032279;
   fWeightMatrix0to1[11][2] = -0.0595120152410376;
   fWeightMatrix0to1[12][2] = -0.305319133011067;
   fWeightMatrix0to1[13][2] = -0.200876166726598;
   fWeightMatrix0to1[14][2] = -0.394519523714526;
   fWeightMatrix0to1[0][3] = -0.134162241078716;
   fWeightMatrix0to1[1][3] = 2.08480656565668;
   fWeightMatrix0to1[2][3] = 2.03328198283171;
   fWeightMatrix0to1[3][3] = 1.96436723614841;
   fWeightMatrix0to1[4][3] = 2.05644515776619;
   fWeightMatrix0to1[5][3] = 0.829457133829359;
   fWeightMatrix0to1[6][3] = 1.34281686346248;
   fWeightMatrix0to1[7][3] = 1.2440245441508;
   fWeightMatrix0to1[8][3] = 1.08333741586637;
   fWeightMatrix0to1[9][3] = -0.0347149048775205;
   fWeightMatrix0to1[10][3] = -1.90400820091681;
   fWeightMatrix0to1[11][3] = 0.0347844693602992;
   fWeightMatrix0to1[12][3] = -1.42503522192772;
   fWeightMatrix0to1[13][3] = -0.722248517745336;
   fWeightMatrix0to1[14][3] = 0.0934631422728088;
   fWeightMatrix0to1[0][4] = -0.218044732806113;
   fWeightMatrix0to1[1][4] = -0.429007192546279;
   fWeightMatrix0to1[2][4] = -1.09109880257324;
   fWeightMatrix0to1[3][4] = 1.20220522536396;
   fWeightMatrix0to1[4][4] = 0.622761777355933;
   fWeightMatrix0to1[5][4] = -1.35158417611644;
   fWeightMatrix0to1[6][4] = 0.618877477190222;
   fWeightMatrix0to1[7][4] = 0.0341581767697007;
   fWeightMatrix0to1[8][4] = 2.66874233075617;
   fWeightMatrix0to1[9][4] = 0.244366910374866;
   fWeightMatrix0to1[10][4] = 0.536701816202659;
   fWeightMatrix0to1[11][4] = -1.61257537509294;
   fWeightMatrix0to1[12][4] = 0.457088021892643;
   fWeightMatrix0to1[13][4] = 0.118872062794058;
   fWeightMatrix0to1[14][4] = 2.37715282133314;
   fWeightMatrix0to1[0][5] = -0.0430508725145848;
   fWeightMatrix0to1[1][5] = 0.0299128767870732;
   fWeightMatrix0to1[2][5] = -2.39092428537803;
   fWeightMatrix0to1[3][5] = -0.813181737383684;
   fWeightMatrix0to1[4][5] = -0.231652289311978;
   fWeightMatrix0to1[5][5] = 2.37417727017677;
   fWeightMatrix0to1[6][5] = 0.0993498945366054;
   fWeightMatrix0to1[7][5] = 1.53767151491337;
   fWeightMatrix0to1[8][5] = -1.89334158091297;
   fWeightMatrix0to1[9][5] = -0.0712259524043807;
   fWeightMatrix0to1[10][5] = 0.911010441928357;
   fWeightMatrix0to1[11][5] = 0.856541981299427;
   fWeightMatrix0to1[12][5] = -1.50026555765372;
   fWeightMatrix0to1[13][5] = -2.51455494534333;
   fWeightMatrix0to1[14][5] = -3.44962138796239;
   fWeightMatrix0to1[0][6] = -0.0322419962425019;
   fWeightMatrix0to1[1][6] = 0.974437467324597;
   fWeightMatrix0to1[2][6] = 0.0769835872892583;
   fWeightMatrix0to1[3][6] = -0.910530489576616;
   fWeightMatrix0to1[4][6] = -0.97046239272768;
   fWeightMatrix0to1[5][6] = -0.697581449303287;
   fWeightMatrix0to1[6][6] = -0.225164689772234;
   fWeightMatrix0to1[7][6] = -1.49239039666979;
   fWeightMatrix0to1[8][6] = -1.79307917729657;
   fWeightMatrix0to1[9][6] = 0.510536964352372;
   fWeightMatrix0to1[10][6] = -1.94997118761262;
   fWeightMatrix0to1[11][6] = 1.02292577844666;
   fWeightMatrix0to1[12][6] = 1.4826018427865;
   fWeightMatrix0to1[13][6] = -0.23066633541557;
   fWeightMatrix0to1[14][6] = 0.212113226372542;
   fWeightMatrix0to1[0][7] = 0.0212314398948405;
   fWeightMatrix0to1[1][7] = 0.133578191160715;
   fWeightMatrix0to1[2][7] = 0.419568343030302;
   fWeightMatrix0to1[3][7] = -0.124110737085889;
   fWeightMatrix0to1[4][7] = -0.0473915291651608;
   fWeightMatrix0to1[5][7] = -0.0371590766169503;
   fWeightMatrix0to1[6][7] = -0.0151487942427268;
   fWeightMatrix0to1[7][7] = -0.253211518509156;
   fWeightMatrix0to1[8][7] = -0.126393429866467;
   fWeightMatrix0to1[9][7] = 0.0579742281566286;
   fWeightMatrix0to1[10][7] = -0.00227298886387625;
   fWeightMatrix0to1[11][7] = -0.0350718844861956;
   fWeightMatrix0to1[12][7] = -0.111522237190073;
   fWeightMatrix0to1[13][7] = -0.242912665928615;
   fWeightMatrix0to1[14][7] = -0.185924382913522;
   fWeightMatrix0to1[0][8] = -10.4914036696005;
   fWeightMatrix0to1[1][8] = 1.08547445909132;
   fWeightMatrix0to1[2][8] = 0.945635704031313;
   fWeightMatrix0to1[3][8] = -1.11174107696188;
   fWeightMatrix0to1[4][8] = 3.28332852090125;
   fWeightMatrix0to1[5][8] = -1.83472240921597;
   fWeightMatrix0to1[6][8] = 5.1459579980386;
   fWeightMatrix0to1[7][8] = 1.56354874882537;
   fWeightMatrix0to1[8][8] = -3.62706375864027;
   fWeightMatrix0to1[9][8] = 5.96008167075283;
   fWeightMatrix0to1[10][8] = 3.97428805862345;
   fWeightMatrix0to1[11][8] = -3.09115486611521;
   fWeightMatrix0to1[12][8] = 5.07648470930767;
   fWeightMatrix0to1[13][8] = 0.639048447204441;
   fWeightMatrix0to1[14][8] = -3.98656158509456;
   fWeightMatrix0to1[0][9] = -0.0818966734887323;
   fWeightMatrix0to1[1][9] = 0.0983091888958178;
   fWeightMatrix0to1[2][9] = -0.494915314896937;
   fWeightMatrix0to1[3][9] = -0.132823469624883;
   fWeightMatrix0to1[4][9] = 0.461686638566015;
   fWeightMatrix0to1[5][9] = 1.37045046710343;
   fWeightMatrix0to1[6][9] = 0.065439027237673;
   fWeightMatrix0to1[7][9] = 0.168485355489173;
   fWeightMatrix0to1[8][9] = -0.111377305192953;
   fWeightMatrix0to1[9][9] = -0.062420642881796;
   fWeightMatrix0to1[10][9] = -0.0416481364780226;
   fWeightMatrix0to1[11][9] = -0.06402725773252;
   fWeightMatrix0to1[12][9] = -0.0733794900415246;
   fWeightMatrix0to1[13][9] = -0.438611205916681;
   fWeightMatrix0to1[14][9] = -0.407724227168855;
   fWeightMatrix0to1[0][10] = -7.66220653020064;
   fWeightMatrix0to1[1][10] = 2.78662302357418;
   fWeightMatrix0to1[2][10] = 2.92723511048034;
   fWeightMatrix0to1[3][10] = -1.42588143785007;
   fWeightMatrix0to1[4][10] = 3.9037569989612;
   fWeightMatrix0to1[5][10] = -0.790560392670333;
   fWeightMatrix0to1[6][10] = 5.68573941675101;
   fWeightMatrix0to1[7][10] = 3.07001957736567;
   fWeightMatrix0to1[8][10] = 1.85520624927431;
   fWeightMatrix0to1[9][10] = 4.73737236231995;
   fWeightMatrix0to1[10][10] = 3.62210980039531;
   fWeightMatrix0to1[11][10] = 3.70788574142503;
   fWeightMatrix0to1[12][10] = 4.56014843026156;
   fWeightMatrix0to1[13][10] = 1.06625144427893;
   fWeightMatrix0to1[14][10] = -3.96667387216976;
   // weight matrix from layer 1 to 2
   fWeightMatrix1to2[0][0] = -3.82893777747752;
   fWeightMatrix1to2[0][1] = 1.23489100228995;
   fWeightMatrix1to2[0][2] = 0.348322840795921;
   fWeightMatrix1to2[0][3] = -1.09630574496946;
   fWeightMatrix1to2[0][4] = 1.22477820707469;
   fWeightMatrix1to2[0][5] = -0.621464069814988;
   fWeightMatrix1to2[0][6] = 1.19286299389001;
   fWeightMatrix1to2[0][7] = 0.642654500010333;
   fWeightMatrix1to2[0][8] = 1.5454269115511;
   fWeightMatrix1to2[0][9] = 0.8181527041389;
   fWeightMatrix1to2[0][10] = 1.32839615061938;
   fWeightMatrix1to2[0][11] = 2.59340558387973;
   fWeightMatrix1to2[0][12] = 1.5184752318636;
   fWeightMatrix1to2[0][13] = 0.456288227370007;
   fWeightMatrix1to2[0][14] = -0.728346878588224;
   fWeightMatrix1to2[0][15] = -2.70710825554806;
}

inline double ReadMLP::GetMvaValue__( const std::vector<double>& inputValues ) const
{
   if (inputValues.size() != static_cast<unsigned int>(10)) {
      std::cout << "Input vector needs to be of size " << 10 << std::endl;
      return 0;
   }

   std::array<double, 16> fWeights1 {{}};
   std::array<double, 1> fWeights2 {{}};
   fWeights1.back() = 1.;

   // layer 0 to 1
   for (unsigned o=0; o<15; o++) {
      std::array<double, 11> buffer; // no need to initialise
      for (unsigned i = 0; i<11 - 1; i++) {
         buffer[i] = fWeightMatrix0to1[o][i] * inputValues[i];
      } // loop over i
      buffer.back() = fWeightMatrix0to1[o][10];
      for (unsigned i=0; i<11; i++) {
         fWeights1[o] += buffer[i];
      } // loop over i
    } // loop over o
   for (unsigned o=0; o<15; o++) {
      fWeights1[o] = ActivationFnc(fWeights1[o]);
   } // loop over o
   // layer 1 to 2
   for (unsigned o=0; o<1; o++) {
      std::array<double, 16> buffer; // no need to initialise
      for (unsigned i=0; i<16; i++) {
         buffer[i] = fWeightMatrix1to2[o][i] * fWeights1[i];
      } // loop over i
      for (unsigned i=0; i<16; i++) {
         fWeights2[o] += buffer[i];
      } // loop over i
    } // loop over o
   for (unsigned o=0; o<1; o++) {
      fWeights2[o] = OutputActivationFnc(fWeights2[o]);
   } // loop over o

   return fWeights2[0];
}

double ReadMLP::ActivationFnc(double x) const {
   // fast hyperbolic tan approximation
   if (x > 4.97) return 1;
   if (x < -4.97) return -1;
   float x2 = x * x;
   float a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
   float b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
   return a / b;
}
double ReadMLP::OutputActivationFnc(double x) const {
   // sigmoid
   return 1.0/(1.0+exp(-x));
}

// Clean up
inline void ReadMLP::Clear()
{
}
inline double ReadMLP::GetMvaValue( const std::vector<double>& inputValues ) const
{
   // classifier response value
   double retval = 0;

   // classifier response, sanity check first
   if (!IsStatusClean()) {
      std::cout << "Problem in class \"" << fClassName << "\": cannot return classifier response"
                << " because status is dirty" << std::endl;
   }
   else {
         std::vector<double> iV(inputValues);
         Transform( iV, -1 );
         retval = GetMvaValue__( iV );
   }

   return retval;
}

//_______________________________________________________________________
inline void ReadMLP::InitTransform_1()
{
   double fMin_1[3][10];
   double fMax_1[3][10];
   // Normalization transformation, initialisation
   fMin_1[0][0] = 0.407389819622;
   fMax_1[0][0] = 3.21856975555;
   fScal_1[0][0] = 2.0/(fMax_1[0][0]-fMin_1[0][0]);
   fOff_1[0][0] = fMin_1[0][0]*fScal_1[0][0]+1.;
   fMin_1[1][0] = 0.427151799202;
   fMax_1[1][0] = 3.44619870186;
   fScal_1[1][0] = 2.0/(fMax_1[1][0]-fMin_1[1][0]);
   fOff_1[1][0] = fMin_1[1][0]*fScal_1[1][0]+1.;
   fMin_1[2][0] = 0.407389819622;
   fMax_1[2][0] = 3.44619870186;
   fScal_1[2][0] = 2.0/(fMax_1[2][0]-fMin_1[2][0]);
   fOff_1[2][0] = fMin_1[2][0]*fScal_1[2][0]+1.;
   fMin_1[0][1] = -0.999771118164;
   fMax_1[0][1] = 0.999927699566;
   fScal_1[0][1] = 2.0/(fMax_1[0][1]-fMin_1[0][1]);
   fOff_1[0][1] = fMin_1[0][1]*fScal_1[0][1]+1.;
   fMin_1[1][1] = -0.999929726124;
   fMax_1[1][1] = 0.999877214432;
   fScal_1[1][1] = 2.0/(fMax_1[1][1]-fMin_1[1][1]);
   fOff_1[1][1] = fMin_1[1][1]*fScal_1[1][1]+1.;
   fMin_1[2][1] = -0.999929726124;
   fMax_1[2][1] = 0.999927699566;
   fScal_1[2][1] = 2.0/(fMax_1[2][1]-fMin_1[2][1]);
   fOff_1[2][1] = fMin_1[2][1]*fScal_1[2][1]+1.;
   fMin_1[0][2] = -0.982351541519;
   fMax_1[0][2] = 0.982966780663;
   fScal_1[0][2] = 2.0/(fMax_1[0][2]-fMin_1[0][2]);
   fOff_1[0][2] = fMin_1[0][2]*fScal_1[0][2]+1.;
   fMin_1[1][2] = -0.991416931152;
   fMax_1[1][2] = 0.984229743481;
   fScal_1[1][2] = 2.0/(fMax_1[1][2]-fMin_1[1][2]);
   fOff_1[1][2] = fMin_1[1][2]*fScal_1[1][2]+1.;
   fMin_1[2][2] = -0.991416931152;
   fMax_1[2][2] = 0.984229743481;
   fScal_1[2][2] = 2.0/(fMax_1[2][2]-fMin_1[2][2]);
   fOff_1[2][2] = fMin_1[2][2]*fScal_1[2][2]+1.;
   fMin_1[0][3] = 0.550109684467;
   fMax_1[0][3] = 4.40419769287;
   fScal_1[0][3] = 2.0/(fMax_1[0][3]-fMin_1[0][3]);
   fOff_1[0][3] = fMin_1[0][3]*fScal_1[0][3]+1.;
   fMin_1[1][3] = 0.975385606289;
   fMax_1[1][3] = 4.98971271515;
   fScal_1[1][3] = 2.0/(fMax_1[1][3]-fMin_1[1][3]);
   fOff_1[1][3] = fMin_1[1][3]*fScal_1[1][3]+1.;
   fMin_1[2][3] = 0.550109684467;
   fMax_1[2][3] = 4.98971271515;
   fScal_1[2][3] = 2.0/(fMax_1[2][3]-fMin_1[2][3]);
   fOff_1[2][3] = fMin_1[2][3]*fScal_1[2][3]+1.;
   fMin_1[0][4] = -2.49603462219;
   fMax_1[0][4] = 2.49910926819;
   fScal_1[0][4] = 2.0/(fMax_1[0][4]-fMin_1[0][4]);
   fOff_1[0][4] = fMin_1[0][4]*fScal_1[0][4]+1.;
   fMin_1[1][4] = -2.49915957451;
   fMax_1[1][4] = 2.49951863289;
   fScal_1[1][4] = 2.0/(fMax_1[1][4]-fMin_1[1][4]);
   fOff_1[1][4] = fMin_1[1][4]*fScal_1[1][4]+1.;
   fMin_1[2][4] = -2.49915957451;
   fMax_1[2][4] = 2.49951863289;
   fScal_1[2][4] = 2.0/(fMax_1[2][4]-fMin_1[2][4]);
   fOff_1[2][4] = fMin_1[2][4]*fScal_1[2][4]+1.;
   fMin_1[0][5] = -2.49615335464;
   fMax_1[0][5] = 2.49700021744;
   fScal_1[0][5] = 2.0/(fMax_1[0][5]-fMin_1[0][5]);
   fOff_1[0][5] = fMin_1[0][5]*fScal_1[0][5]+1.;
   fMin_1[1][5] = -2.49744796753;
   fMax_1[1][5] = 2.49400496483;
   fScal_1[1][5] = 2.0/(fMax_1[1][5]-fMin_1[1][5]);
   fOff_1[1][5] = fMin_1[1][5]*fScal_1[1][5]+1.;
   fMin_1[2][5] = -2.49744796753;
   fMax_1[2][5] = 2.49700021744;
   fScal_1[2][5] = 2.0/(fMax_1[2][5]-fMin_1[2][5]);
   fOff_1[2][5] = fMin_1[2][5]*fScal_1[2][5]+1.;
   fMin_1[0][6] = -2.49950528145;
   fMax_1[0][6] = 2.48041439056;
   fScal_1[0][6] = 2.0/(fMax_1[0][6]-fMin_1[0][6]);
   fOff_1[0][6] = fMin_1[0][6]*fScal_1[0][6]+1.;
   fMin_1[1][6] = -2.49785208702;
   fMax_1[1][6] = 2.49615073204;
   fScal_1[1][6] = 2.0/(fMax_1[1][6]-fMin_1[1][6]);
   fOff_1[1][6] = fMin_1[1][6]*fScal_1[1][6]+1.;
   fMin_1[2][6] = -2.49950528145;
   fMax_1[2][6] = 2.49615073204;
   fScal_1[2][6] = 2.0/(fMax_1[2][6]-fMin_1[2][6]);
   fOff_1[2][6] = fMin_1[2][6]*fScal_1[2][6]+1.;
   fMin_1[0][7] = 0.00158832210582;
   fMax_1[0][7] = 6.28295326233;
   fScal_1[0][7] = 2.0/(fMax_1[0][7]-fMin_1[0][7]);
   fOff_1[0][7] = fMin_1[0][7]*fScal_1[0][7]+1.;
   fMin_1[1][7] = 0.000243336049607;
   fMax_1[1][7] = 6.28175067902;
   fScal_1[1][7] = 2.0/(fMax_1[1][7]-fMin_1[1][7]);
   fOff_1[1][7] = fMin_1[1][7]*fScal_1[1][7]+1.;
   fMin_1[2][7] = 0.000243336049607;
   fMax_1[2][7] = 6.28295326233;
   fScal_1[2][7] = 2.0/(fMax_1[2][7]-fMin_1[2][7]);
   fOff_1[2][7] = fMin_1[2][7]*fScal_1[2][7]+1.;
   fMin_1[0][8] = 0.000952766335104;
   fMax_1[0][8] = 7.44772195816;
   fScal_1[0][8] = 2.0/(fMax_1[0][8]-fMin_1[0][8]);
   fOff_1[0][8] = fMin_1[0][8]*fScal_1[0][8]+1.;
   fMin_1[1][8] = 0.000634083291516;
   fMax_1[1][8] = 1.48080074787;
   fScal_1[1][8] = 2.0/(fMax_1[1][8]-fMin_1[1][8]);
   fOff_1[1][8] = fMin_1[1][8]*fScal_1[1][8]+1.;
   fMin_1[2][8] = 0.000634083291516;
   fMax_1[2][8] = 7.44772195816;
   fScal_1[2][8] = 2.0/(fMax_1[2][8]-fMin_1[2][8]);
   fOff_1[2][8] = fMin_1[2][8]*fScal_1[2][8]+1.;
   fMin_1[0][9] = 0;
   fMax_1[0][9] = 1;
   fScal_1[0][9] = 2.0/(fMax_1[0][9]-fMin_1[0][9]);
   fOff_1[0][9] = fMin_1[0][9]*fScal_1[0][9]+1.;
   fMin_1[1][9] = 0;
   fMax_1[1][9] = 1;
   fScal_1[1][9] = 2.0/(fMax_1[1][9]-fMin_1[1][9]);
   fOff_1[1][9] = fMin_1[1][9]*fScal_1[1][9]+1.;
   fMin_1[2][9] = 0;
   fMax_1[2][9] = 1;
   fScal_1[2][9] = 2.0/(fMax_1[2][9]-fMin_1[2][9]);
   fOff_1[2][9] = fMin_1[2][9]*fScal_1[2][9]+1.;
}

//_______________________________________________________________________
inline void ReadMLP::Transform_1( std::vector<double>& iv, int cls) const
{
   // Normalization transformation
   if (cls < 0 || cls > 2) {
   if (2 > 1 ) cls = 2;
      else cls = 2;
   }
   const int nVar = 10;

   // get indices of used variables

   // define the indices of the variables which are transformed by this transformation
   static std::vector<int> indicesGet;
   static std::vector<int> indicesPut;

   if ( indicesGet.empty() ) {
      indicesGet.reserve(fNvars);
      indicesGet.push_back( 0);
      indicesGet.push_back( 1);
      indicesGet.push_back( 2);
      indicesGet.push_back( 3);
      indicesGet.push_back( 4);
      indicesGet.push_back( 5);
      indicesGet.push_back( 6);
      indicesGet.push_back( 7);
      indicesGet.push_back( 8);
      indicesGet.push_back( 9);
   }
   if ( indicesPut.empty() ) {
      indicesPut.reserve(fNvars);
      indicesPut.push_back( 0);
      indicesPut.push_back( 1);
      indicesPut.push_back( 2);
      indicesPut.push_back( 3);
      indicesPut.push_back( 4);
      indicesPut.push_back( 5);
      indicesPut.push_back( 6);
      indicesPut.push_back( 7);
      indicesPut.push_back( 8);
      indicesPut.push_back( 9);
   }

   static std::vector<double> dv;
   dv.resize(nVar);
   for (unsigned ivar=0; ivar<nVar; ivar++) dv[ivar] = iv[static_cast<unsigned>(indicesGet.at(ivar))];
   for (unsigned ivar=0;ivar<10;ivar++) {
      double offset = fOff_1[cls][ivar];
      double scale  = fScal_1[cls][ivar];
      iv[static_cast<unsigned>(indicesPut.at(ivar))] = scale*dv[ivar]-offset;
   }
}

//_______________________________________________________________________
inline void ReadMLP::InitTransform()
{
   InitTransform_1();
}

//_______________________________________________________________________
inline void ReadMLP::Transform( std::vector<double>& iv, int sigOrBgd ) const
{
   Transform_1( iv, sigOrBgd );
}


int main() {
  time_t begtime, endtime;
  time(&begtime);

  vector<string> inputVars;
  inputVars.push_back("min_dR_gamma_lepton");
  inputVars.push_back("llg_cosTheta");
  inputVars.push_back("llg_costheta");
  inputVars.push_back("max_dR_gamma_lepton");
  inputVars.push_back("gamma_eta");
  inputVars.push_back("lep_plus_eta");
  inputVars.push_back("lep_minus_eta");
  inputVars.push_back("llg_Phi");
  inputVars.push_back("llg_pt_over_llg_mass");
  inputVars.push_back("gamma_id");

  IClassifierReader * mlpResponse = new ReadMLP(inputVars);

  vector<double> inputVec = {1.2607361,-0.078321576,0.3646947,2.063934,1.6483939,1.7328734,1.5531967,1.4967942,0.08417049,0.0};
  cout<<"output: "<<mlpResponse->GetMvaValue(inputVec)<<endl;
  inputVec = {1.4750283,0.6229103,0.1409514,1.7629681,-0.020043612,0.72810507,1.1698363,4.6101546,0.55935556,0.0};
  cout<<"output: "<<mlpResponse->GetMvaValue(inputVec)<<endl;

  time(&endtime); 
  cout<<endl<<"Took "<<difftime(endtime, begtime)<<" seconds"<<endl<<endl;
  return 0;
}
